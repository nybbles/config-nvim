-- Themester Neovim Integration Bridge
-- This module applies themester's current theme on Neovim startup
-- Auto-generated by themester - do not edit manually

local M = {}

-- Mapping from theme identifiers to colorscheme configuration
-- For regular themes, just the colorscheme name
-- For special themes like Catppuccin, includes configuration setup
local theme_config = {
    ["nighthawk-dark"] = { colorscheme = "nighthawk_dark" },
    ["nighthawk-light"] = { colorscheme = "nighthawk_light" },
    ["catppuccin-mocha"] = { 
        colorscheme = "catppuccin",
        setup = function()
            -- Configure catppuccin for mocha flavor
            vim.g.catppuccin_flavour = "mocha"
            if pcall(require, "catppuccin") then
                require("catppuccin").setup({ flavour = "mocha" })
            end
        end
    },
    ["catppuccin-latte"] = { 
        colorscheme = "catppuccin",
        setup = function()
            -- Configure catppuccin for latte flavor
            vim.g.catppuccin_flavour = "latte"
            if pcall(require, "catppuccin") then
                require("catppuccin").setup({ flavour = "latte" })
            end
        end
    },
    ["instinct-dark"] = { colorscheme = "instinct_dark" },
    ["instinct-light"] = { colorscheme = "instinct_light" },
    ["x0x-dark"] = { colorscheme = "x0x_dark" },
    ["x0x-light"] = { colorscheme = "x0x_light" },
}

-- Get the current theme identifier from themester configuration
local function get_current_theme_id()
    -- Read themester configuration
    local config_file = vim.fn.expand("~/.config/themester/config.toml")
    if vim.fn.filereadable(config_file) == 0 then
        error("Themester config file not found: " .. config_file)
    end
    
    -- Simple TOML parsing for current_theme field
    for line in io.lines(config_file) do
        local theme_match = line:match('^current_theme%s*=%s*"([^"]+)"')
        if theme_match then
            return theme_match
        end
    end
    
    error("No current_theme set in themester configuration")
end

-- Resolve theme configuration
local function resolve_theme_config(theme_id)
    local config = theme_config[theme_id]
    if config then
        return config
    end
    
    -- Fallback: try to use theme_id directly (for custom themes)
    -- Convert kebab-case to snake_case as a reasonable default
    local fallback_name = theme_id:gsub("%-", "_")
    return { colorscheme = fallback_name }
end

-- Apply the colorscheme with proper configuration
local function apply_theme(config)
    -- Run any setup function first
    if config.setup then
        config.setup()
    end
    
    -- Check if colorscheme exists
    local colorschemes = vim.fn.getcompletion('', 'color')
    local found = false
    for _, name in ipairs(colorschemes) do
        if name == config.colorscheme then
            found = true
            break
        end
    end
    
    if not found then
        error("Colorscheme '" .. config.colorscheme .. "' not found. Available colorschemes: " .. table.concat(colorschemes, ", "))
    end
    
    -- Apply the colorscheme
    vim.cmd.colorscheme(config.colorscheme)
end

-- Main function to sync with themester
function M.sync()
    local theme_id = get_current_theme_id()
    local config = resolve_theme_config(theme_id)
    apply_theme(config)
end

-- Setup function to initialize themester integration
function M.setup()
    -- Apply theme on startup
    M.sync()
    
    -- Set up autocmd to apply theme on VimEnter (in case setup is called early)
    vim.api.nvim_create_autocmd("VimEnter", {
        group = vim.api.nvim_create_augroup("ThemesterSync", { clear = true }),
        callback = function()
            M.sync()
        end,
    })
end

return M
